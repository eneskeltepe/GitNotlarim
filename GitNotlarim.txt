ls – Bulunduğumuz dosya konumundaki dosyaları gösterir.
ls -la - Bu komut ile gizli klasörleri de görebiliriz.
pwd – bulunduğumuz klasör ismini gösterir.
clear – komut dizinindeki her şeyi temizler.

cd GitKursu – Bulunduğumuz konumda GitKursu adında bir klasör oluşturur.
mkdir GitKursu – GitKursu klasörü içine giriş yapar.
touch not.txt – Bulunduğumuz konumda not.txt adında bir dosya oluşturur.
cd .. – Bulunduğumuz konumdan bir önceki konuma geri döner.
rm GitKursu – GitKursu isimli klasörü siler.
rm -rf not.txt – GitKursu klasörüne giriş yaptıktan sonra -rf komutu ile not.txt dosyasını silebiliriz.

git – bu komutu yazarak gitin yardım dökümantasyonunu gösterir.
git –version – Bilgisayarınızda hangi versiyonun yüklü olduğunu gösterir.
git config –global user.name “Enes Keltepe” – Kullanıcı adımızı belirtmemizi sağlar
ve yine bu kod ile istediğimiz zaman kullanıcı adımızı değiştirebiliriz.

git config user.name – Kullanıcı adımızı gösterir.
git config –global user.name mail@mail – Mailimizi belirtmemizi sağlar.
git config user.email – Mailimizi gösterir. 
git status - git ile bir klasörde çalışmak istiyorsak bu durum komutunu çalıştırmalıyız ve git bu klasöre bağlı mı kontrol etmeliyiz.
git init - Giti bulunduğumuz klasöre bağlamak için init kullanıyoruz.
git add GitNotlarim.txt - GitNotlarim.txt dosyasını commit etmek için ekliyoruz.
git add . - . komutu ile klasör içindeki tüm dosyaları add yapabiliriz.
ama bu yöntemi kullanmak bazen dezavantajlara yol açabilir.(Git ignore incele)
git commit -m "GitNotlarim olusturuldu ve içine bir kaç git komutu not alındı." - 
GitNotlarim.txt dosyasını commit ediyoruz ve -m ile mesaj ekliyoruz.

git log - gitteki değişikliklerde tutulan log kayıtlarını gösterir.
gitignore - gitteki gözardı edilecek dosyaları belirtmemizi sağlar.Önce touch .gitignore adında dosya oluşturuyoruz.
ardından o dosya içine gizli.txt yazıyoruz.Artık gizli.txt dosyası gözardı edilecek.git o dosyayı takip etmeyecek.

git branch - branch listesini verir.
git branch feat - feat isminde bir branch oluşturur ve o branch üzerinde headimiz olur.
git switch master - master branchine geri döner ve orada headimiz devam eder.
git merge feat - feat branchi ile master branchini birleştirir.
fast forwarding - mesela d isimli bir branch oluşturduk.Bu branchde değişiklik yaptık ama master 
branchinde değişiklik yapmadık. git merge d yaptığımızda d branchi master branchi gibi oluyor
ve head master oluyor.(Anlatınca baya karmaşık oldu ama kolay.)

merge conflict - Birden fazla branch birleştirmeye çalışırken çakışma veya uyuşma hatası olursa
merge conflict oluşur. Bu durumda çakışan kısımları kendimiz düzeltmemiz gerekir.

git stash - yaptığımız değişikliği saklamayı sağlar.
git stash list - stash listesini görmemizi sağlar.
git stash pop - yaptığımız değişikliği geri bırakır.
git stash apply - yaptığımız değişikliği geri bırakır ama stash listesinde tutmaya devam eder.
git stash clear - stash listesini temizler.

git restore giris.txt - giris.txt dosyasındaki bir önceki commite döner.
git checkout (commit bash kodu) - commitin bash kodunu kopyalayıp buraya yapıştırıp o commite döneriz.
bu yöntem ile HEAD kısmını masterdan koparırız(detached) ama master yine en sonda durmaya devam eder.
head kısmını ya tekrar mastera bağlayacak (git switch master) 
ya da yeni branch açıp (git branc feat , git switch feat) headi oraya geçiricez.




